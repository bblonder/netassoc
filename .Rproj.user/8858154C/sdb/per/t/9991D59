{
    "contents" : "# plot network\nplot_netassoc_network <- function(network, layout = layout.auto(network), \n                      vertex.label = V(network)$name, \n                      vertex.color = NA, \n                      vertex.shape = \"none\",\n                      vertex.label.color = \"black\", \n                      vertex.label.family = \"sans\",\n                      edge.width = NULL, \n                      edge.color = NULL, \n                      edge.arrow.size = 0.05, \n                      vertex.label.cex = 0.5, \n                      ...)\n{  \t\n  if(is.null(edge.width))\n  {\n    if(length(E(network)$weight)==0)\n    {\n      edge.width=1\n    }\n    else\n    {\n      edge.width=sqrt(abs(E(network)$weight))\n    }\n  }\n  \n  if(is.null(edge.color))\n  {\n    if(length(E(network)$weight)==0)\n    {\n      edge.color <- 'black'  \n      zlmin <- -1\n      zlmax <- 1\n    }\n    else\n    {\n      edge.color <- ifelse(E(network)$weight > 0, rgb(0,0,1,0.8),rgb(1,0,0,0.8))\n      zlmax <- max(abs(E(network)$weight),na.rm=T)\n      zlmin = -1*zlmax\n    }\n  }\n  \n  plot(network,\n       layout=layout,\n       vertex.label=vertex.label,\n       edge.color=edge.color,\n       edge.width=edge.width,\n       vertex.color=vertex.color,\n       vertex.label.color=vertex.label.color,\n       vertex.shape=vertex.shape,\n       edge.arrow.size=edge.arrow.size,\n       vertex.label.cex=vertex.label.cex,\n       vertex.label.family=vertex.label.family,\n       ...)\n  \n  colors=colorRampPalette(c('red','white','blue'))(51)\n  legend('topleft',adj=c(0,0),legend=format(c(zlmin,zlmin/2+zlmax/2,zlmax),digits=2),fill=c(colors[1],colors[ceiling(length(colors)/2)],colors[length(colors)]),bg='white',cex=0.5)\n}\n\nplot_netassoc_matrix <- function(data, colors, ylab='Species',xlab='Site',onesided=FALSE,main=\"\")\n{\n  zlmax <- max(abs(as.numeric(data)),na.rm=T)\n  if (is.infinite(zlmax))\n  {\n    zlmax <- 1\n  }\n  if (onesided==TRUE)\n  {\n    zlmin = 0\n  }\n  else\n  {\n    zlmin = -1*zlmax\n  }\n  \n  image(t(data),col=colors,axes=F,zlim=c(zlmin, zlmax),main=main)\n  \n  mtext(side=2,text=ylab,cex=0.5)\n  mtext(side=3,text=xlab,cex=0.5)\n  legend('topleft',adj=c(0,0),legend=format(c(zlmin,zlmin/2+zlmax/2,zlmax),digits=2),fill=c(colors[1],colors[ceiling(length(colors)/2)],colors[length(colors)]),bg='white',cex=0.5)\n  box()\n}\n\n\nspcor <- function(matrix, sp1id, sp2id, method) # problems ca\n{\n  # get pres/abs for each species across sites\n  vec1 <- matrix[sp1id,]\n  vec2 <- matrix[sp2id,]\n  \n  return(cor(vec1, vec2, method=method))\n}\n\n# generate null sp x site matrices with same total abundance as observed and species probabilities drawn abundances within the base null matrix\ngenerate_nul_resample <- function(nul, obs, verbose=TRUE)\n{\n  nul_resample <- nul\n  for (i in 1:ncol(nul_resample))\n  {\n    # zero out all values\n    nul_resample[,i] <- 0\n    \n    # fill in resamples with the same total abundance\n    abund_simulated <- table(sample(names(nul[,i]),size=sum(obs[,i]),replace=T,prob=nul[,i]))\n    nul_resample[names(abund_simulated),i] <- abund_simulated  \t\n  }\t\n  if (verbose==TRUE) { cat('.') }\n  \n  return(nul_resample)\n}  \n\nmakenetwork <- function(obs, nul, method='pearson', kappa=2, numnulls=1000, debug=FALSE,verbose=TRUE)\n{\t  \n  obs <- as.matrix(obs,rownames.force=TRUE)\n  nul <- as.matrix(nul,rownames.force=TRUE)\n  \n  if(!all(dim(obs)==dim(nul)))\n  {\n    stop(\"obs and nul must be same dimensionalities.\")\n  }\n\n  problemspecies <- which(rowSums(obs)==0 | rowSums(nul)==0)\n  warning(sprintf(\"Some species do not occur in any sites: %s\",paste(names(problemspecies),collapse=\", \")))\n\n  #obs <- obs[-problemspecies,]\n  #nul <- nul[-problemspecies,]\n\n  if (debug==TRUE)\n  {\n    par(mfrow=c(2,4)) \n    par(cex.lab=0.5)\n    par(cex.main=0.6)\n    par(mar=c(0.5,2,2,0.5))\n  }\n  \n  if (debug==TRUE)\n  {\n    plot_netassoc_matrix(obs, colors=colorRampPalette(c('white','green'))(51),onesided=TRUE,main=\"Observed sp x site\")\n\n    plot_netassoc_matrix(nul, colors=colorRampPalette(c('white','black'))(51),onesided=TRUE,main=\"Null sp x site\")\n  }\n  \n  \n  if (verbose==TRUE) { cat('Generating null replicates...') }\n  nulls <- replicate(numnulls, generate_nul_resample(nul, obs, verbose=verbose))\n  if (verbose==TRUE) { cat('...done.\\n') }\n  \n  if (debug==TRUE)\n  {\n    plot_netassoc_matrix(nulls[,,sample(numnulls, 1)], colors=colorRampPalette(c('white','black'))(51),onesided=TRUE,main=\"Example null resample sp x site\")\n  }\t\n  \n\n  fm_obs <- matrix(NA,nrow=nrow(obs),ncol=nrow(obs))\n  fm_nul_mean <- matrix(NA,nrow=nrow(obs),ncol=nrow(obs))\n  fm_nul_sd <- matrix(NA,nrow=nrow(obs),ncol=nrow(obs))\n  \n  finalmatrix <- matrix(NA,nrow=nrow(obs),ncol=nrow(obs))\n  \n  if (verbose==TRUE) { cat('Calculating co-occurrence scores...') }\n  count <- 0\n  for (i in 1:nrow(obs))\n  {\n    for (j in i:nrow(obs))\n    {\n      if (i!=j)\n      {\n        count <- count + 1\n        if (verbose==TRUE) { cat (sprintf('%.3f ', count/(nrow(obs)*(nrow(obs)-1)/2))) }\n        \n        cor_obs <- spcor(obs, i, j, method=method)\n        \n        fm_obs[i,j] <- cor_obs\n        if (!is.na(cor_obs))\n        {\n          cor_nul <- rep(NA, dim(nulls)[3])\n          \n          for (k in 1:dim(nulls)[3])\n          {\n            cor_nul[k] <- spcor(nulls[,,k], i, j, method=method)\n          }\n          \n          fm_nul_mean[i,j] <- mean(cor_nul,na.rm=T)\n          fm_nul_sd[i,j] <- sd(cor_nul,na.rm=T)    \n        }\n      }\n    }\n  }\n  if (verbose==TRUE) { cat('...done.\\n') }\n  \n  # calculate standard effect size\n  if (verbose==TRUE) { cat('Calculating standardized effect sizes...') }\n  finalmatrix <- (fm_obs - fm_nul_mean) / fm_nul_sd\n  if (verbose==TRUE) { cat('...done.\\n') }\n  \n  if (debug==TRUE)\n  {\n    plot_netassoc_matrix(fm_obs, xlab='Species',ylab='Species',colors=colorRampPalette(c('red','white','blue'))(51),main=\"Observed co-occurrence score for sp x sp\")\n    plot_netassoc_matrix(fm_nul_mean, xlab='Species',ylab='Species',colors=colorRampPalette(c('red','white','blue'))(51),main=\"Null mean co-occurrence score for sp x sp\")\n    plot_netassoc_matrix(fm_nul_sd,   xlab='Species',ylab='Species',colors=colorRampPalette(c('white','gray'))(51),onesided=TRUE,main=\"Null s.d. co-occurrence score for sp x sp\")\n  }\n  \n  dimnames(finalmatrix) <- list(row.names(obs),row.names(obs))\n  \n  # trim out low-value nodes\t\n  if (verbose==TRUE) { cat('Applying kappa threshold...') }\n  finalmatrix_trimmed <- finalmatrix\n  finalmatrix_trimmed[abs(finalmatrix_trimmed) < kappa] <- 0\n  finalmatrix_trimmed[is.na(finalmatrix_trimmed)] <- 0\n  finalmatrix_trimmed[is.infinite(finalmatrix_trimmed)] <- 0\n  if (verbose==TRUE) { cat('...done.\\n') }\n\n  if (debug==TRUE)\n  {\n    plot_netassoc_matrix(finalmatrix_trimmed, xlab='Species',ylab='Species',colorRampPalette(c('red','white','blue'))(51),main=\"S.E.S. co-occurrence score for sp x sp\")\n  }\n  \n  # convert to network representation\n  if (verbose==TRUE) { cat('Building network...') }\n  network_all <- graph.adjacency(finalmatrix_trimmed,mode='upper',weighted=T)\n  if (verbose==TRUE) { cat('...done.\\n') }\n  \n  if (debug==TRUE)\n  {\n    plot_netassoc_network(network_all)\n    title('Association network')\n  }\n  \n  if (debug==TRUE)\n  {\n    par(mfrow=c(1,1))\n  }\n  \n  if (debug==TRUE)\n  {\n    return(list(\n      matrix_spsite_obs=obs,\n      matrix_spsite_null=nul,\n      matrix_spsite_nulls=nulls,\n      matrix_spsp_obs=fm_obs,\n      matrix_spsp_null_mean=fm_nul_mean,\n      matrix_spsp_null_sd=fm_nul_sd,\n      matrix_spsp_ses_all=finalmatrix,\n      matrix_spsp_ses_thresholded=finalmatrix_trimmed,\n      network_all=network_all\n      ))\n  }\n  else\n  {\n    return(network_all)\n  }\n}\n\n",
    "created" : 1422485627059.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3276502630",
    "id" : "9991D59",
    "lastKnownWriteTime" : 1422657433,
    "path" : "~/Documents/BIEN projects/coexistence networks/netassoc/R/netassoc.R",
    "project_path" : "R/netassoc.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}