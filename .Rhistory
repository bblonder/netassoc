m_obs[1,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
m_obs[2,(nsi/2+1):nsi] <- rpois(n=nsi/2,lambda=20)
#m_obs[3,21:30] <- rpois(n=10,lambda=50)
#m_obs[4,31:40] <- rpois(n=10,lambda=50)
n <- makenetwork(m_obs, m_nul, method="shrinkage",numnulls=1000, plot=TRUE,alpha=0.1)
n
?p.adjus
?p.adjust
library(netassoc)
set.seed(1)
nsp <- 10
nsi <- 20
m_obs <- floor(matrix(rpois(nsp*nsi,lambda=5),ncol=nsi,nrow=nsp))
m_nul <- floor(matrix(rpois(nsp*nsi,lambda=5),ncol=nsi,nrow=nsp))
m_obs[1,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
m_obs[2,(nsi/2+1):nsi] <- rpois(n=nsi/2,lambda=20)
#m_obs[3,21:30] <- rpois(n=10,lambda=50)
#m_obs[4,31:40] <- rpois(n=10,lambda=50)
n <- makenetwork(m_obs, m_nul, method="shrinkage",p.method='none', numnulls=1000, plot=TRUE,alpha=0.5)
n <- makenetwork(m_obs, m_nul, method="exact",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.5)
n <- makenetwork(m_obs, m_nul, method="exact",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
library(netassoc)
library(netassoc)
n <- makenetwork(m_obs, m_nul, method="exact",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
?colorRampPalette
gray(1:10)
gray(1:10/10)
1/1:100
plot(1/1:100)
gray(1/1:100)
gray(1-1/1:100)
library(netassoc)
n <- makenetwork(m_obs, m_nul, method="exact",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
set.seed(1)
nsp <- 10
nsi <- 20
m_obs <- floor(matrix(rpois(nsp*nsi,lambda=5),ncol=nsi,nrow=nsp))
m_nul <- floor(matrix(rpois(nsp*nsi,lambda=5),ncol=nsi,nrow=nsp))
#m_obs[1,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
#m_obs[2,(nsi/2+1):nsi] <- rpois(n=nsi/2,lambda=20)
m_obs[1,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
m_obs[1,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
n <- makenetwork(m_obs, m_nul, method="exact",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
m_obs[2,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
set.seed(1)
nsp <- 10
nsi <- 20
m_obs <- floor(matrix(rpois(nsp*nsi,lambda=5),ncol=nsi,nrow=nsp))
m_nul <- floor(matrix(rpois(nsp*nsi,lambda=5),ncol=nsi,nrow=nsp))
#m_obs[1,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
#m_obs[2,(nsi/2+1):nsi] <- rpois(n=nsi/2,lambda=20)
m_obs[1,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
m_obs[2,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
n <- makenetwork(m_obs, m_nul, method="exact",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
library(netassoc)
n <- makenetwork(m_obs, m_nul, method="correlation",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
n <- makenetwork(m_obs, m_nul, method="correlation",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
library(netassoc)
library(netassoc)
n <- makenetwork(m_obs, m_nul, method="correlation",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
library(netassoc)
library(vegan)
obs
m_obs
permatfull(m_obs)
permatfull(m_obs)[1]
permatfull(m_obs)[2]
str(permatfull(m_obs))
library(netassoc)
n <- makenetwork(m_obs, m_nul, method="correlation",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
n <- makenetwork(m_obs, method="correlation",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
?makenetwork
library(netassoc)
n <- makenetwork(m_obs, method="correlation",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
library(netassoc)
n <- makenetwork(m_obs, method="correlation",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
n <- makenetwork(m_obs, method="correlation",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
n <- makenetwork(m_obs, method="correlation",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
n <- makenetwork(m_obs,m_obs, method="correlation",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
library(netassoc)
library(huge)
install.packages("huge")
?huge.select
library(huge)
?huge.select
huge(m_obs, method="glasso")
z <- huge(m_obs, method="glasso")
z
plot(z)
huge.select(z)
z2 <- huge.select(z)
z2
plot(z2)
z2$icov
str(z2)
str(z)
?huge.select
z2$opt.icov
library(netassoc)
library(netassoc)
n <- makenetwork(m_obs, method="glasso",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
n <- makenetwork(m_obs, method="correlation",p.method='fdr', numnulls=1000, plot=TRUE,alpha=0.05)
n <- makenetwork(m_obs, method="glasso",p.method='fdr', numnulls=10, plot=TRUE,alpha=0.05)
set.seed(1)
nsp <- 10
nsi <- 200
m_obs <- floor(matrix(rpois(nsp*nsi,lambda=5),ncol=nsi,nrow=nsp))
m_nul <- floor(matrix(rpois(nsp*nsi,lambda=5),ncol=nsi,nrow=nsp))
#m_obs[1,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
#m_obs[2,(nsi/2+1):nsi] <- rpois(n=nsi/2,lambda=20)
m_obs[1,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
m_obs[2,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
n <- makenetwork(m_obs, method="glasso",p.method='fdr', numnulls=10, plot=TRUE,alpha=0.05)
library(netassoc)
set.seed(1)
nsp <- 10
nsi <- 200
m_obs <- floor(matrix(rpois(nsp*nsi,lambda=5),ncol=nsi,nrow=nsp))
m_nul <- floor(matrix(rpois(nsp*nsi,lambda=5),ncol=nsi,nrow=nsp))
#m_obs[1,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
#m_obs[2,(nsi/2+1):nsi] <- rpois(n=nsi/2,lambda=20)
m_obs[1,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
m_obs[2,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
n <- makenetwork(m_obs, method="glasso",p.method='fdr', numnulls=10, plot=TRUE,alpha=0.05)
?huge.select
n <- makenetwork(m_obs, method="glasso",p.method='fdr', numnulls=10, plot=TRUE,alpha=0.05)
library(netassoc)
n <- makenetwork(m_obs, method="glasso",p.method='fdr', numnulls=10, plot=TRUE,alpha=0.05)
library(netassoc)
n <- makenetwork(m_obs, method="glasso",p.method='fdr', numnulls=10, plot=TRUE,alpha=0.05)
library(netassoc)
?importFrom
?decompose.invcov
library(netassoc)
prompt(getpcor)
prompt(plot_netassoc_matix)
prompt(makenetwork)
set.seed(1)
nsp <- 10
nsi <- 200
m_obs <- floor(matrix(rpois(nsp*nsi,lambda=5),ncol=nsi,nrow=nsp))
m_nul <- floor(matrix(rpois(nsp*nsi,lambda=5),ncol=nsi,nrow=nsp))
m_obs[1,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
m_obs[2,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
n <- makenetwork(m_obs, method="shrinkage",p.method='fdr', numnulls=100, plot=TRUE,alpha=0.5)
n <- makenetwork(m_obs, method="shrinkage",p.method='fdr', numnulls=100, plot=TRUE,alpha=0.05)
n <- makenetwork(m_obs, method="shrinkage",p.method='fdr', numnulls=100, plot=TRUE,alpha=0.01)
nsi <- 20
n <- makenetwork(m_obs, method="shrinkage",p.method='fdr', numnulls=100, plot=TRUE,alpha=0.01)
set.seed(1)
nsp <- 10
nsi <- 20
m_obs <- floor(matrix(rpois(nsp*nsi,lambda=5),ncol=nsi,nrow=nsp))
m_nul <- floor(matrix(rpois(nsp*nsi,lambda=5),ncol=nsi,nrow=nsp))
m_obs[1,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
m_obs[2,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
n <- makenetwork(m_obs, method="shrinkage",p.method='fdr', numnulls=100, plot=TRUE,alpha=0.01)
n <- makenetwork(m_obs, method="shrinkage",p.method='fdr', numnulls=100, plot=TRUE,alpha=0.05)
set.seed(1)
nsp <- 10
nsi <- 50
m_obs <- floor(matrix(rpois(nsp*nsi,lambda=5),ncol=nsi,nrow=nsp))
m_nul <- floor(matrix(rpois(nsp*nsi,lambda=5),ncol=nsi,nrow=nsp))
m_obs[1,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
m_obs[2,1:(nsi/2)] <- rpois(n=nsi/2,lambda=20)
n <- makenetwork(m_obs, method="shrinkage",p.method='fdr', numnulls=100, plot=TRUE,alpha=0.05)
?ridgeS
?invcov.shrink
data(cars)
?cars
data(iris)
library(netassoc)
data(longley)
longley
str(longley)
longley[,c(1:5,7)]
pc_ridge <- getpcor(longley_ss,method="ridge")
longley_ss <- longley[,c(1:5,7)]
pc_ridge <- getpcor(longley_ss,method="ridge")
pc_ridge
longley_ss
str(longley_ss)
longley_ss <- longley[,c(1:5,7)]
pc_ridge <- getpcor(t(longley_ss),method="ridge")
pc_ridge
data(longley)
longley_ss <- t(longley[,c(1:5,7)]) # put data in correct input format
pc_ridge <- getpcor(longley_ss,method="ridge")
pc_ridge
pc_shrinkage <- getpcor(longley_ss,method="shrinkage")
pc_shrinkage
image(p_shrinkage)
image(pc_shrinkage,zlim=c(-1,1))
image(pc_shrinkage,zlim=c(-1,1),col=terrain.colors(10))
?terrain.colors
par(mfrow=c(1,2))
image(pc_shrinkage,zlim=c(-1,1),col=terrain.colors(10))
image(pc_ridge,zlim=c(-1,1),col=terrain.colors(10))
colors <- colorRampPalette(c("red","white","blue"))(10)
colors
data(longley)
longley_ss <- t(longley[,c(1:5,7)]) # put data in correct input format
colors <- colorRampPalette(c("red","white","blue"))(10)
pc_ridge <- getpcor(longley_ss,method="ridge")
pc_shrinkage <- getpcor(longley_ss,method="shrinkage")
image(pc_shrinkage,zlim=c(-1,1),col=colors)
image(pc_ridge,zlim=c(-1,1),col=colors)
library(netassoc)
library(netassoc)
?getpcor
library(netassoc)
library(netassoc)
?getpcor
?makenetwork
library(netassoc)
?makenetwork
library(netassoc)
library(netassoc)
install.packages("~/Documents/BIEN projects/coexistence networks/netassoc_0.5.0.tar.gz", repos = NULL, type = "source")
library(netassoc)
nul <- matrix(rpois(nps*nsites),nrow=nsp,ncol=nsites)
nul <- matrix(rpois(nsp*nsites),nrow=nsp,ncol=nsites)
nul
nsp <- 10
nsites <- 100
nul <- matrix(rpois(nsp*nsites),nrow=nsp,ncol=nsites)
meanabund <- 50
nul <- matrix(rpois(nsp*nsites,),nrow=nsp,ncol=nsites)
meanabund <- 50
nul <- matrix(rpois(n=nsp*nsites,lambda=meanabund),nrow=nsp,ncol=nsites)
nul
meanabund <- 10
nul <- matrix(rpois(n=nsp*nsites,lambda=meanabund),nrow=nsp,ncol=nsites)
nul
nul <- matrix(rgamma(n=nsp*nsites,meanabund),nrow=nsp,ncol=nsites)
nul
meanabund <- 5
nul <- matrix(rpois(n=nsp*nsites,meanabund),nrow=nsp,ncol=nsites)
nul
?barabasi.albert.game
?igraph
barabasi.game(n=nsp)
barabasi.game(n=nsp)
plot(barabasi.game(nsp))
?barabasi.game
plot(barabasi.game(n=nsp,directed=F)
)
plot(barabasi.game(n=nsp*10,directed=F)
)
?barabasi.game
net_true <- barabasi.game(n=nsp,directed=F)
net_true
E(Gnet_true)
E(net_true)
E(net_true)$weight
E(net_true)$weight <- rnorm(nsp)
set.edge.attribute(net_true, "weight",1)
set.edge.attribute(net_true, "weight",value=1)
net_true$weight
E(net_true)
E(net_true)$weight
rbinom(10,1)
?rbinom
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(10,1,0.5)
net_true <- barabasi.game(n=nsp,directed=F)
E(net_true)$weight <- rbinom(nsp,1,0.5)
E(net_true)
E(net_true)$weight
net_true <- barabasi.game(n=nsp,directed=F)
E(net_true)$weight <- ifelse(rbinom(nsp,1,0.5),1,-1)
E(net_true)$weight
net_true <- barabasi.game(n=nsp,directed=F)
E(net_true)$weight <- ifelse(rbinom(nsp,1,0.5),1,-1)
E(net_true)$weight
net_true <- barabasi.game(n=nsp,directed=F)
E(net_true)$weight <- ifelse(rbinom(nsp,1,0.5),1,-1)
E(net_true)$weight
net_true <- barabasi.game(n=nsp,directed=F)
E(net_true)$weight <- ifelse(rbinom(nsp,1,0.5),1,-1)
E(net_true)$weight
?E
as.matrix(net_true)
get.adjedgelist(net_true)
get.edgelist(net_true)
cbind(get.edgelist(net_true),sign=ifelse(rbinom(nsp,1,0.5),1,-1))
e
cbind(get.edgelist(net_true),sign=ifelse(rbinom(ecount(net_true),1,0.5),1,-1))
cbind(vertex=get.edgelist(net_true),sign=ifelse(rbinom(ecount(net_true),1,0.5),1,-1))
edges_true <- cbind(get.edgelist(net_true),sign=ifelse(rbinom(ecount(net_true),1,0.5),1,-1))
edges_true
whichsites <- sample(1:nsites,n=nsites*frac_sites)
whichsites <- sample(1:nsites,nsites*frac_sites)
frac_sites <- 0.1
whichsites <- sample(1:nsites,nsites*frac_sites)
whichsites
frac_sites <- 0.5
whichsites <- sample(1:nsites,nsites*frac_sites)
whichsites
edges_true <- data.frame(get.edgelist(net_true),ifelse(rbinom(ecount(net_true),1,frac_pos),1,-1))
names(edges_true) <- c("spa","spb","sign")
frac_pos <- 0.5
edges_true <- data.frame(get.edgelist(net_true),ifelse(rbinom(ecount(net_true),1,frac_pos),1,-1))
names(edges_true) <- c("spa","spb","sign")
edges_true
?barabasi.game
net_true <- erdos.renyi.game(n=nsp,directed=F,p.or.m=ninteractions, type="gnm")
edges_true <- data.frame(get.edgelist(net_true),ifelse(rbinom(ecount(net_true),1,frac_pos),1,-1))
names(edges_true) <- c("spa","spb","sign")
net_true
ninteractions <- 20
net_true <- erdos.renyi.game(n=nsp,directed=F,p.or.m=ninteractions, type="gnm")
edges_true <- data.frame(get.edgelist(net_true),ifelse(rbinom(ecount(net_true),1,frac_pos),1,-1))
names(edges_true) <- c("spa","spb","sign")
net_true
plot(net_true)
x <- rnorm(100)
y <- rnorm(100)
cor(xy)
cor(x,y)
x[1:50] <- x[1:50] + y[1:50]
cor(x,y)
x <- rnorm(100)
y <- rnorm(100)
cor(x,y)
x[1:50] <- x[1:50] - y[1:50]
cor(x,y)
library(netassoc)
nsp <- 10
nsites <- 100
ninteractions <- 20
w <- 0.8
frac_pos <- 0.5
meanabund <- 10
nul <- matrix(rpois(n=nsp*nsites,meanabund),nrow=nsp,ncol=nsites)
net_true <- erdos.renyi.game(n=nsp,directed=F,p.or.m=ninteractions, type="gnm")
edges_true <- data.frame(get.edgelist(net_true),ifelse(rbinom(ecount(net_true),1,frac_pos),1,-1))
names(edges_true) <- c("spa","spb","sign")
obs <- nul
for (i in 1:nrow(edges_true))
{
spa_this <- edges_true$spa[i]
spb_this <- edges_true$spb[i]
weight_this <- edges_true$sign[i]
obstemp <- obs
obs[spa_this,sites_this] <- w*obstemp[spa_this,]+weight_this*(1-w)*obstemp[spb_this,]
obs[spb_this,sites_this] <- w*obstemp[spa_this,]+weight_this*(1-w)*obstemp[spb_this,]
}
library(netassoc)
nsp <- 10
nsites <- 100
ninteractions <- 20
w <- 0.8
frac_pos <- 0.5
meanabund <- 10
nul <- matrix(rpois(n=nsp*nsites,meanabund),nrow=nsp,ncol=nsites)
net_true <- erdos.renyi.game(n=nsp,directed=F,p.or.m=ninteractions, type="gnm")
edges_true <- data.frame(get.edgelist(net_true),ifelse(rbinom(ecount(net_true),1,frac_pos),1,-1))
names(edges_true) <- c("spa","spb","sign")
obs <- nul
for (i in 1:nrow(edges_true))
{
spa_this <- edges_true$spa[i]
spb_this <- edges_true$spb[i]
weight_this <- edges_true$sign[i]
obstemp <- obs
obs[spa_this,] <- w*obstemp[spa_this,]+weight_this*(1-w)*obstemp[spb_this,]
obs[spb_this,] <- w*obstemp[spa_this,]+weight_this*(1-w)*obstemp[spb_this,]
}
obs
plot(obs)
pairs(obs)
image(obs)
pairs(nul)
image(nul)
library(netassoc)
nsp <- 10
nsites <- 100
ninteractions <- 20
w <- 0.8
frac_pos <- 0.5
meanabund <- 10
nul <- matrix(rpois(n=nsp*nsites,meanabund),nrow=nsp,ncol=nsites)
net_true <- erdos.renyi.game(n=nsp,directed=F,p.or.m=ninteractions, type="gnm")
edges_true <- data.frame(get.edgelist(net_true),ifelse(rbinom(ecount(net_true),1,frac_pos),1,-1))
names(edges_true) <- c("spa","spb","sign")
obs <- nul
for (i in 1:nrow(edges_true))
{
spa_this <- edges_true$spa[i]
spb_this <- edges_true$spb[i]
weight_this <- edges_true$sign[i]
obstemp <- obs
obs[spa_this,] <- w*obstemp[spa_this,]+weight_this*(1-w)*obstemp[spb_this,]
obs[spb_this,] <- w*obstemp[spa_this,]+weight_this*(1-w)*obstemp[spb_this,]
}
par(mfrow=c(1,2))
image(obs)
image(nul)
makenetwork(obs, nul)
?makenetwork
makenetwork(obs, nul)
library(netassoc)
net_inf <- makenetwork(obs, nul)
library(netassoc)
net_inf <- makenetwork(obs, nul)
?makenetwork
net_inf
net_in$network_all
net_inf$network_all
net_true
plot(net_true,layout=layout.circle)
plot(net_inf$network_all,layout=layout.circle)
plotnetassoc(net_inf$network_all,layout=layout.circle)
plotnetassoc(net_inf$network_all,layout=layout.auto)
plotnetassoc(net_inf$network_all,layout=layout.auto(net_inf$network_all))
plotnetassoc(net_inf$network_all,layout=layout.auto(net_true))
par(mfrow=c(1,2))
plotnetassoc(net_inf$network_all,layout=layout.auto(net_true))
plotnetassoc(net_true,layout=layout.auto(net_true))
nul <- matrix(rpois(n=nsp*nsites,meanabund),nrow=nsp,ncol=nsites,dimnames=list(paste("Species",1:nsp),paste("Site",1:nsites)))
library(netassoc)
nsp <- 10
nsites <- 100
ninteractions <- 20
w <- 0.8
frac_pos <- 0.5
meanabund <- 10
nul <- matrix(rpois(n=nsp*nsites,meanabund),nrow=nsp,ncol=nsites,dimnames=list(paste("Species",1:nsp),paste("Site",1:nsites)))
net_true <- erdos.renyi.game(n=nsp,directed=F,p.or.m=ninteractions, type="gnm")
edges_true <- data.frame(get.edgelist(net_true),ifelse(rbinom(ecount(net_true),1,frac_pos),1,-1))
names(edges_true) <- c("spa","spb","sign")
obs <- nul
for (i in 1:nrow(edges_true))
{
spa_this <- edges_true$spa[i]
spb_this <- edges_true$spb[i]
weight_this <- edges_true$sign[i]
obstemp <- obs
obs[spa_this,] <- w*obstemp[spa_this,]+weight_this*(1-w)*obstemp[spb_this,]
obs[spb_this,] <- w*obstemp[spa_this,]+weight_this*(1-w)*obstemp[spb_this,]
}
net_inf <- makenetwork(obs, nul)$net_inf
par(mfrow=c(1,2))
l <- layout.auto(net_true)
plotnetassoc(net_inf,layout=l)
plotnetassoc(net_true,layout=l)
library(netassoc)
nsp <- 10
nsites <- 100
ninteractions <- 20
w <- 0.8
frac_pos <- 0.5
meanabund <- 10
nul <- matrix(rpois(n=nsp*nsites,meanabund),nrow=nsp,ncol=nsites,dimnames=list(paste("Species",1:nsp),paste("Site",1:nsites)))
net_true <- erdos.renyi.game(n=nsp,directed=F,p.or.m=ninteractions, type="gnm")
edges_true <- data.frame(get.edgelist(net_true),ifelse(rbinom(ecount(net_true),1,frac_pos),1,-1))
names(edges_true) <- c("spa","spb","sign")
obs <- nul
for (i in 1:nrow(edges_true))
{
spa_this <- edges_true$spa[i]
spb_this <- edges_true$spb[i]
weight_this <- edges_true$sign[i]
obstemp <- obs
obs[spa_this,] <- w*obstemp[spa_this,]+weight_this*(1-w)*obstemp[spb_this,]
obs[spb_this,] <- w*obstemp[spa_this,]+weight_this*(1-w)*obstemp[spb_this,]
}
net_inf <- makenetwork(obs, nul)
par(mfrow=c(1,2))
l <- layout.auto(net_true)
plotnetassoc(net_inf,layout=l)
plotnetassoc(net_true,layout=l)
par(mfrow=c(1,2))
l <- layout.auto(net_true)
plotnetassoc(net_inf$network_all,layout=l)
plotnetassoc(net_true,layout=l)
library(netassoc)
nsp <- 10
nsites <- 100
ninteractions <- 20
w <- 0.8
frac_pos <- 0.5
meanabund <- 10
nul <- matrix(rpois(n=nsp*nsites,meanabund),nrow=nsp,ncol=nsites,dimnames=list(paste("Species",1:nsp),paste("Site",1:nsites)))
net_true <- erdos.renyi.game(n=nsp,directed=F,p.or.m=ninteractions, type="gnm")
V(net_true)$name <- paste("Species",1:nsp)
edges_true <- data.frame(get.edgelist(net_true),ifelse(rbinom(ecount(net_true),1,frac_pos),1,-1))
names(edges_true) <- c("spa","spb","sign")
obs <- nul
for (i in 1:nrow(edges_true))
{
spa_this <- edges_true$spa[i]
spb_this <- edges_true$spb[i]
weight_this <- edges_true$sign[i]
obstemp <- obs
obs[spa_this,] <- w*obstemp[spa_this,]+weight_this*(1-w)*obstemp[spb_this,]
obs[spb_this,] <- w*obstemp[spa_this,]+weight_this*(1-w)*obstemp[spb_this,]
}
net_inf <- makenetwork(obs, nul)
par(mfrow=c(1,2))
l <- layout.auto(net_true)
plotnetassoc(net_inf$network_all,layout=l)
plotnetassoc(net_true,layout=l)
net_true
